# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest

steps:
- script: echo Hello, world!
  displayName: 'Run a one-line script'

- script: |
    echo Add other tasks to build, test, and deploy your project.
    echo See https://aka.ms/yaml
  displayName: 'Run a multi-line script'


- task: TerraformTaskV4@4
  displayName: 'Terraform - Version'
  inputs:
    provider: 'azurerm'
    command: 'custom'
    commandOptions: 'version'
    outputTo: 'console'
    customCommand: 'version'
    environmentServiceNameAzureRM: 'terraform'


- task: TerraformTaskV4@4
  displayName: 'Terraform Intialization'
  inputs:
    provider: 'azurerm'
    command: 'init'
    backendServiceArm: 'terraform'
    backendAzureRmResourceGroupName: 'Devopsrg'
    backendAzureRmStorageAccountName: 'terraforminfradfevops'
    backendAzureRmContainerName: 'blob'
    backendAzureRmKey: 'terraform.tfstate'



- task: DownloadSecureFile@1
  displayName: 'Download private key'
  inputs:
    secureFile: 'id_rsa'

- task: DownloadSecureFile@1
  displayName: 'Download Public key'
  inputs:
    secureFile: 'id_rsa.pub'

- script: |
    mkdir -p ~/.ssh
    [ -f ~/.ssh/id_rsa.pub ] || cp /home/vsts/work/_temp/id_rsa.pub ~/.ssh/id_rsa.pub
    [ -f ~/.ssh/id_rsa ] || cp /home/vsts/work/_temp/id_rsa ~/.ssh/id_rsa
    chmod 640 ~/.ssh/id_rsa.pub
    chmod 600 ~/.ssh/id_rsa
  displayName: 'Setup SSH Keys'


- task: TerraformTaskV4@4
  displayName: 'Terraform Validate'
  inputs:
    provider: 'azurerm'
    command: 'validate'
- script: 
    echo "Ensure apache-install is available"
    ls -l /tmp/
  displayName: 'check apache install script'



- task: TerraformTaskV4@4
  displayName: 'Terraform Plan'
  inputs:
    provider: 'azurerm'
    command: 'plan'
    commandOptions: '-out=tfplan'
    environmentServiceNameAzureRM: 'terraform'

- task: TerraformTaskV4@4
  displayName: 'Terraform Apply'
  inputs:
    provider: 'azurerm'
    command: 'apply'
    commandOptions: '-auto-approve tfplan'
    environmentServiceNameAzureRM: 'terraform'
